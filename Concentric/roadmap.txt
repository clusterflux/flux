day 1: game engine => no
       basic tutorial => process
	   game concept => too many, just write some classes
	   no other testing method => figure out interface
	   convert tutorial => start button, some pic
	   some pic => use draw, custom view
	   read => activity, view, thread?
	   canvas? bitmap? tiled map next
	   
day 2:

clean up filenames => compile successful

draw a picture on the background => 
    canvas, bitmap, view, drawable, surfaceview...wtf => accomplished. drew a canvas on a static? bitmap
	lots of time spent getting bitmap to draw - using bitmap method since we need it for tiled map purposes
	lot of time spent getting bitmap size correct (different screen sizes, thinking ahead) 
	   => still not correct, but we are going to tile it anyway


day 3:

draw a tiled map into a bitmap using an array => hash for translation, array for map, draw using a for loop
fuck drawing it into a bitmap, just draw many bitmaps into a canvas. then we can make a bitmap from it later for scrolling
abstraction => break translation and map into methods, abstract all variables
code cleanup => most of the static bitmap code and screen sizing is gone, fuck it, larger screen = see more game space. 
needs more abstraction => need to move map generation into world object and just let view have the drawing methods. 
end up will all my own code, cool!

abstract world class
add menu button for generating world, fuck with layout
worldactivity for worldgeneration
generate world on the fly text view
read up on io functions
loadWorld and saveWorld functions
almost get it working
read up on serializable


day 4:
finish file io, test test test
move world functions to world class, break/fix break/fix
look for other things to abstract. kill tile map, it's part of world generation code
rename functions to make sense, comment as i go
read up on memory leak, passing context
consider convention => abstract abstract abstract test test test

day 5:
added world selection activity
lots of trouble passing variable from activity -> activity -> view
plenty of time spent on debugging. only getting exceptions, no debug messages (LOGCAT)
can generate a world and load it too!
read up on git versioning

day 6:
figure out debugging / LOGCAT
set up github but dont use it
set up cloud9io but dont use it
learn about cameras vs canvas.translate
get background scrolling based on player coordinate variables
get background scrolling based on click = hardcoded player move
more understanding of layouts, inflation, views, activities
try to figure out structure of where to run code/logic
cameras? still need to draw world tiles based on where player is
thank you debugging!
toast messages

day 7:
break! git conceptual

day 8:
add 'world generating' toast message, pass object as result back to menu activity
work on new code map - finish activities and return to parent, instead of jumping through activities in sequence
rework existing code to provide a better framework for future code =>
only drawing and clicking done in views, more/less functions in activites where it makes sense
rename world activity to worldgenerationactivity
get world loading out of map view and into menu or game activity!
format code to one convention
fix up comments and debug messages
general housecleaning
rename startgame to worldselection
things are flowing now. minor updates are no biggie. major updates went smoothly!
git is really making things feel nice!
need a start up activity for tile translator => make it into an object for mapview to construct
add 'world loading' toast message => added it to worldselection listview's on click listener so it hits before the load
-code is correctly organized for adding swipe features-
-code is organized enough now to get major updates-

day9:
spent time on forums asking about organization
learned about factories
implemented swipe to move all 4 directions

day10:
implemented collision on stone - fixed world drawing from (1,1) instead of (0,0)
changed app and package name to Concentric!

day11:
play with getting player to move more than one tile at a time => logic works, but breaks on drawing
read up on surfaceviews, threads, handlers, executions

day12,13,14(15?) - WoT AMoL

day 16:
worldfactory -- bust, but cleaned up the methods
static tile map -- can't do static with getResources - is there a better way?
break out activity oncreate tasks into methods for ease of reading -- they look ok for now, hard to reference context in methods
create surfaceview and thread -- done!
fix back button bug on world selection - done

day 18?
added player class
added camera class
moved player logic to GameActivity


fix player/map edge logic - done
identify camera via top left coord instead of middle coord - done
figure out how to deal with tile size relative to screen size - done

added cool 2.5D cuteplanet prototyping tiles + canvas.translate to fix null space
implemented overlapping tiles
added 2nd layer generation and rendering

implemented shadows

BACK AFTER MONTHS!

-new game idea!
-fixed shadow boundary bug
-removed perlin noise generator and generated X world w/ 4 biomes - heaven, hell, fantasy, the waste
-now world generation is fast!

day 2 back:
removed swipe, added dpad
procedural generation is back! (need variety for testing + shadows are cool)

todo:

research:
move update method to MapThread? implement touch listener in view? thread?

next:
touch and hold
fix touch slowing bug
fix FPS
identify which direction the player is facing based on last press

housekeeping:
fix height/width naming discrepancies
points and rects! redo camera, player, etc.

research: is it necessary?
add canvas.translate to world drawing. only draw new tiles - maybe bad with surfaceview? <--- why did I think it would be?

menu housekeeping
abstract out the view for world activity. worldview = view the generated world, choose to save it
method to delete worlds (long press? new activity under world management?)

other 
ability to change orientation via surfacechanged
abstract sprite class?

make a map of all the current code - is there a progam for this?


read:
context, intent, attributeset

write:
game engine or not?
abstraction!
do what's fun
debugging!
cloud dev/github/version control
avoiding "housecleaning"
version control!
prototyping tiles
shading
hiatus => thank past self for great comments


